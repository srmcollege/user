class HashTable:
    def __init__(self, size=10):
        self.size = size
        self.table = [None] * self.size

    def _hash(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self._hash(key)
        if self.table[index] is None:
            self.table[index] = [(key, value)]
        else:
            for i, (k, v) in enumerate(self.table[index]):
                if k == key:
                    self.table[index][i] = (key, value)
                    return
            self.table[index].append((key, value))

    def delete(self, key):
        index = self._hash(key)
        if self.table[index] is not None:
            for i, (k, v) in enumerate(self.table[index]):
                if k == key:
                    del self.table[index][i]
                    return True
        return False

    def traverse(self):
        for i, bucket in enumerate(self.table):
            if bucket is not None:
                print(f"Index {i}: ", end="")
                for key, value in bucket:
                    print(f"({key}: {value}) -> ", end="")
                print("None")
            else:
                print(f"Index {i}: None")

# Example Usage
ht = HashTable()

# Insertion
ht.insert("key1", "value1")
ht.insert("key2", "value2")
ht.insert("key3", "value3")
ht.insert("key1", "updated_value1")  # Update existing key

# Traversal
print("Hash Table Contents:")
ht.traverse()

# Deletion
ht.delete("key2")
print("\nAfter deleting key2:")
ht.traverse()
