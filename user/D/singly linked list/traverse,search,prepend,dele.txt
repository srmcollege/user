class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SinglyLinkedList:
    def __init__(self):
        self.head = None

    def prepend(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
        print(f"Prepended: {data}")

    def delete(self, key):
        current = self.head
        previous = None

        while current and current.data != key:
            previous = current
            current = current.next

        if current is None:
            print(f"Node with data {key} not found.")
            return

        if previous is None:
            self.head = current.next
        else:
            previous.next = current.next

        print(f"Deleted: {key}")

    def search(self, key):
        current = self.head
        while current:
            if current.data == key:
                return True
            current = current.next
        return False

    def traverse(self):
        current = self.head
        if current is None:
            print("List is empty.")
            return

        print("List elements:")
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

# Example Usage
linked_list = SinglyLinkedList()

# Prepend nodes
linked_list.prepend(10)
linked_list.prepend(20)
linked_list.prepend(30)

# Traverse the list
linked_list.traverse()

# Search for a node
key = 20
if linked_list.search(key):
    print(f"Node with data {key} found.")
else:
    print(f"Node with data {key} not found.")

# Delete a node
linked_list.delete(20)

# Traverse the list after deletion
linked_list.traverse()
