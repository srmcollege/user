#tree traversal
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None
class BinaryTree:
    def __init__(self, array):
        self.root = self.build_tree(array, 0)
    def build_tree(self, array, index):
        if index >= len(array):
            return None
        node = TreeNode(array[index])
        node.left = self.build_tree(array, 2 * index + 1)
        node.right = self.build_tree(array, 2 * index + 2)
        return node
    def pre_order(self, node):
        if node:
            print(node.value, end=' ')
            self.pre_order(node.left)
            self.pre_order(node.right)
    def in_order(self, node):
        if node:
            self.in_order(node.left)
            print(node.value, end=' ')
            self.in_order(node.right)
    def post_order(self, node):
        if node:
            self.post_order(node.left)
            self.post_order(node.right)
            print(node.value, end=' ')

if __name__ == "__main__":
    array = [1, 2, 3, 4, 5, 6, 7] 
    tree = BinaryTree(array)

    print("Pre-order Traversal:")
    tree.pre_order(tree.root)
    print("\nIn-order Traversal:")
    tree.in_order(tree.root)
    print("\nPost-order Traversal:")
    tree.post_order(tree.root) 