class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None

    # Traversal
    def traverse(self):
        current = self.head
        if current is None:
            print("List is empty.")
            return

        print("List elements:")
        while current:
            print(current.data, end=" <-> ")
            current = current.next
        print("None")

    # Insertion at Beginning
    def insert_at_beginning(self, data):
        new_node = Node(data)
        new_node.next = self.head
        if self.head is not None:
            self.head.prev = new_node
        self.head = new_node
        print(f"Inserted at beginning: {data}")

    # Insertion at End
    def insert_at_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node
        new_node.prev = current
        print(f"Inserted at end: {data}")

    # Insertion at Specific Position
    def insert_at_position(self, data, position):
        if position == 0:
            self.insert_at_beginning(data)
            return
        
        new_node = Node(data)
        current = self.head
        for _ in range(position - 1):
            if current is None:
                print("Position exceeds list length.")
                return
            current = current.next
        
        new_node.next = current.next
        new_node.prev = current
        
        if current.next is not None:
            current.next.prev = new_node
        
        current.next = new_node
        print(f"Inserted at position {position}: {data}")

    # Deletion at Beginning
    def delete_at_beginning(self):
        if self.head is None:
            print("List is empty. Nothing to delete.")
            return
        deleted_node = self.head
        self.head = self.head.next
        if self.head is not None:
            self.head.prev = None
        print(f"Deleted: {deleted_node.data}")

    # Deletion at Specific Position
    def delete_at_position(self, position):
        if self.head is None:
            print("List is empty. Nothing to delete.")
            return
        
        current = self.head
        
        if position == 0:
            self.delete_at_beginning()
            return

        for _ in range(position):
            if current is None:
                print("Position exceeds list length.")
                return
            current = current.next
        
        if current is None:
            print("Position exceeds list length.")
            return
        
        if current.next is not None:
            current.next.prev = current.prev
        
        if current.prev is not None:
            current.prev.next = current.next
        
        print(f"Deleted: {current.data}")

    # Deletion at End
    def delete_at_end(self):
        if self.head is None:
            print("List is empty. Nothing to delete.")
            return
        
        current = self.head
        while current.next:
            current = current.next
        
        if current.prev is not None:
            current.prev.next = None
        else:
            self.head = None
        print(f"Deleted: {current.data}")

# Example Usage
dll = DoublyLinkedList()

# Insert nodes
dll.insert_at_end(10)
dll.insert_at_end(20)
dll.insert_at_end(30)
dll.insert_at_beginning(5)
dll.insert_at_position(15, 2)

# Traverse the list
dll.traverse()

# Delete nodes
dll.delete_at_beginning()
dll.delete_at_end()
dll.delete_at_position(1)

# Traverse the list after deletions
dll.traverse()
