class Node:
    def __init__(self, data, priority):
        self.data = data
        self.priority = priority
        self.next = None

class PriorityQueue:
    def __init__(self):
        self.front = None

    # Insertion
    def enqueue(self, data, priority):
        new_node = Node(data, priority)
        if self.front is None or self.front.priority > priority:
            new_node.next = self.front
            self.front = new_node
        else:
            current = self.front
            while current.next and current.next.priority <= priority:
                current = current.next
            new_node.next = current.next
            current.next = new_node
        print(f"Enqueued: {data} with priority {priority}")

    # Traversal
    def traverse(self):
        current = self.front
        if current is None:
            print("Priority Queue is empty.")
            return

        print("Priority Queue elements (data: priority):")
        while current:
            print(f"{current.data}: {current.priority}", end=" -> ")
            current = current.next
        print("None")

    # Deletion
    def dequeue(self):
        if self.front is None:
            print("Priority Queue is empty. Nothing to dequeue.")
            return
        dequeued_node = self.front
        self.front = self.front.next
        print(f"Dequeued: {dequeued_node.data} with priority {dequeued_node.priority}")

# Example Usage
pq = PriorityQueue()

# Enqueue elements with priorities
pq.enqueue("Task 1", 2)
pq.enqueue("Task 2", 1)
pq.enqueue("Task 3", 3)

# Traverse the priority queue
pq.traverse()

# Dequeue elements
pq.dequeue()
pq.dequeue()

# Traverse the priority queue after dequeuing
pq.traverse()

# Dequeue remaining element
pq.dequeue()

# Attempt to dequeue from an empty priority queue
pq.dequeue()
